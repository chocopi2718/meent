import numpy as np


fourier_order = 1


def load_ucell(grating_type):
    if grating_type in (0, 1):

        ucell = np.array([

            [
                [
                    0, 0, 0, 1, 1, 1, 1, 1, 1, 1,
                ],
            ],
            # [
            #     [
            #         0, 0, 0, 1, 1, 1, 1, 1, 1, 1,
            #     ],
            # ],
        ])
    else:
        ucell = np.array([
            # [
            #     [0, 0, 0, 1, 1, 1, 1, 0, 0, 0,],
            #     [0, 0, 0, 1, 1, 0, 1, 1, 1, 1,],
            #     [0, 0, 0, 1, 1, 1, 1, 1, 1, 1,],
            #     [0, 0, 0, 1, 1, 1, 1, 1, 1, 1,],
            #     [0, 0, 0, 1, 1, 1, 1, 1, 1, 1,],
            #     [0, 0, 0, 1, 1, 1, 1, 1, 1, 1,],
            #     [0, 0, 0, 1, 1, 1, 1, 1, 1, 1,],
            #     [0, 0, 0, 1, 1, 1, 1, 1, 1, 1,],
            #     [1, 0, 0, 1, 1, 1, 1, 1, 1, 1,],
            #     [0, 0, 0, 1, 1, 1, 1, 1, 1, 1,],
            # ],

            # [
            #     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
            #     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
            #     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
            #     [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, ],
            #     [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, ],
            #     [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, ],
            #     [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, ],
            #     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
            #     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
            #     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
            # ],

            [
                [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, ],
                [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, ],
                [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, ],
                [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, ],
                [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, ],
                [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, ],
                [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, ],
                [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, ],
                [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, ],
                [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, ],
            ],
        ])

        # ucell = np.array([
        #
        #     [
        #         [0, 0, 0, 1, 1, 1, 1, 1, 1, 1,],
        #         [0, 0, 0, 1, 1, 1, 1, 1, 1, 1,],
        #         [0, 0, 0, 1, 1, 1, 1, 1, 1, 1,],
        #         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1,],
        #         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1,],
        #         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1,],
        #         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1,],
        #         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1,],
        #         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1,],
        #         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1,],
        #     ],
        # ])


    return ucell

def get_cond_numpy(grating_type):

    if grating_type in [0, 1]:

        period = [1000]

        ucell = np.array([

            [
                [
                    0, 0, 0, 1, 1, 1, 1, 1, 1, 1,
                ],
            ],
            # [
            #     [
            #         0, 0, 0, 1, 1, 1, 1, 1, 1, 1,
            #     ],
            # ],
        ])
    else:
        period = [1000, 1000]

        # ucell = torch.tensor([
        ucell = np.array([
            # [
            #     [0, 0, 0, 1, 1, 1, 1, 0, 0, 0,],
            #     [0, 0, 0, 1, 1, 0, 1, 1, 1, 1,],
            #     [0, 0, 0, 1, 1, 1, 1, 1, 1, 1,],
            #     [0, 0, 0, 1, 1, 1, 1, 1, 1, 1,],
            #     [0, 0, 0, 1, 1, 1, 1, 1, 1, 1,],
            #     [0, 0, 0, 1, 1, 1, 1, 1, 1, 1,],
            #     [0, 0, 0, 1, 1, 1, 1, 1, 1, 1,],
            #     [0, 0, 0, 1, 1, 1, 1, 1, 1, 1,],
            #     [1, 0, 0, 1, 1, 1, 1, 1, 1, 1,],
            #     [0, 0, 0, 1, 1, 1, 1, 1, 1, 1,],
            # ],

            # [
            #     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
            #     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
            #     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
            #     [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, ],
            #     [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, ],
            #     [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, ],
            #     [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, ],
            #     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
            #     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
            #     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
            # ],

            [
                [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, ],
                [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, ],
                [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, ],
                [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, ],
                [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, ],
                [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, ],
                [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, ],
                [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, ],
                [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, ],
                [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, ],
            ],
        ])

        # ucell = np.array([
        #
        #     [
        #         [0, 0, 0, 1, 1, 1, 1, 1, 1, 1,],
        #         [0, 0, 0, 1, 1, 1, 1, 1, 1, 1,],
        #         [0, 0, 0, 1, 1, 1, 1, 1, 1, 1,],
        #         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1,],
        #         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1,],
        #         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1,],
        #         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1,],
        #         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1,],
        #         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1,],
        #         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1,],
        #     ],
        # ])
    return period, fourier_order, ucell


def get_cond_jax(grating_type):

    import jax.numpy as jnp

    if grating_type in [0, 1]:

        period = [1000]

        ucell = jnp.array([

            [
                [
                    0, 0, 0, 1, 1, 1, 1, 1, 1, 1,
                ],
            ],
            # [
            #     [
            #         0, 0, 0, 1, 1, 1, 1, 1, 1, 1,
            #     ],
            # ],
        ])
    else:
        # period = torch.tensor([1000, 1000])
        period = [1000, 1000]

        # ucell = torch.tensor([
        ucell = jnp.array([
            # [
            #     [0, 0, 0, 1, 1, 1, 1, 0, 0, 0,],
            #     [0, 0, 0, 1, 1, 0, 1, 1, 1, 1,],
            #     [0, 0, 0, 1, 1, 1, 1, 1, 1, 1,],
            #     [0, 0, 0, 1, 1, 1, 1, 1, 1, 1,],
            #     [0, 0, 0, 1, 1, 1, 1, 1, 1, 1,],
            #     [0, 0, 0, 1, 1, 1, 1, 1, 1, 1,],
            #     [0, 0, 0, 1, 1, 1, 1, 1, 1, 1,],
            #     [0, 0, 0, 1, 1, 1, 1, 1, 1, 1,],
            #     [1, 0, 0, 1, 1, 1, 1, 1, 1, 1,],
            #     [0, 0, 0, 1, 1, 1, 1, 1, 1, 1,],
            # ],

            # [
            #     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
            #     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
            #     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
            #     [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, ],
            #     [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, ],
            #     [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, ],
            #     [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, ],
            #     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
            #     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
            #     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
            # ],

            [
                [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, ],
                [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, ],
                [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, ],
                [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, ],
                [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, ],
                [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, ],
                [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, ],
                [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, ],
                [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, ],
                [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, ],
            ],
        ])

        # ucell = np.array([
        #
        #     [
        #         [0, 0, 0, 1, 1, 1, 1, 1, 1, 1,],
        #         [0, 0, 0, 1, 1, 1, 1, 1, 1, 1,],
        #         [0, 0, 0, 1, 1, 1, 1, 1, 1, 1,],
        #         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1,],
        #         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1,],
        #         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1,],
        #         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1,],
        #         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1,],
        #         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1,],
        #         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1,],
        #     ],
        # ])
    return period, fourier_order, ucell


def get_cond_torch(grating_type):

    import torch

    if grating_type in [0, 1]:

        period = [1000]

        ucell = torch.tensor([

            [
                [
                    0, 0, 0, 1, 1, 1, 1, 1, 1, 1,
                ],
            ],
            # [
            #     [
            #         0, 0, 0, 1, 1, 1, 1, 1, 1, 1,
            #     ],
            # ],
        ])
    else:
        # period = torch.tensor([1000, 1000])
        period = [1000, 1000]

        ucell = torch.tensor([
            # [
            #     [0, 0, 0, 1, 1, 1, 1, 0, 0, 0,],
            #     [0, 0, 0, 1, 1, 0, 1, 1, 1, 1,],
            #     [0, 0, 0, 1, 1, 1, 1, 1, 1, 1,],
            #     [0, 0, 0, 1, 1, 1, 1, 1, 1, 1,],
            #     [0, 0, 0, 1, 1, 1, 1, 1, 1, 1,],
            #     [0, 0, 0, 1, 1, 1, 1, 1, 1, 1,],
            #     [0, 0, 0, 1, 1, 1, 1, 1, 1, 1,],
            #     [0, 0, 0, 1, 1, 1, 1, 1, 1, 1,],
            #     [1, 0, 0, 1, 1, 1, 1, 1, 1, 1,],
            #     [0, 0, 0, 1, 1, 1, 1, 1, 1, 1,],
            # ],

            # [
            #     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
            #     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
            #     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
            #     [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, ],
            #     [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, ],
            #     [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, ],
            #     [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, ],
            #     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
            #     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
            #     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ],
            # ],

            [
                [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, ],
                [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, ],
                [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, ],
                [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, ],
                [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, ],
                [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, ],
                [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, ],
                [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, ],
                [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, ],
                [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, ],
            ],
        ])

        # ucell = np.array([
        #
        #     [
        #         [0, 0, 0, 1, 1, 1, 1, 1, 1, 1,],
        #         [0, 0, 0, 1, 1, 1, 1, 1, 1, 1,],
        #         [0, 0, 0, 1, 1, 1, 1, 1, 1, 1,],
        #         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1,],
        #         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1,],
        #         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1,],
        #         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1,],
        #         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1,],
        #         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1,],
        #         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1,],
        #     ],
        # ])
    return period, fourier_order, ucell

